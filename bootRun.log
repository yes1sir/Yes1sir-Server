nohup: ignoring input
Starting a Gradle Daemon, 5 busy and 2 stopped Daemons could not be reused, use --status for details
Exception in thread "DisconnectableInputStream source reader" org.gradle.api.UncheckedIOException: java.io.IOException: Bad file descriptor
	at org.gradle.internal.UncheckedException.throwAsUncheckedException(UncheckedException.java:62)
	at org.gradle.internal.UncheckedException.throwAsUncheckedException(UncheckedException.java:41)
	at org.gradle.util.internal.DisconnectableInputStream$1.run(DisconnectableInputStream.java:127)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.io.IOException: Bad file descriptor
	at java.base/java.io.FileInputStream.readBytes(Native Method)
	at java.base/java.io.FileInputStream.read(FileInputStream.java:276)
	at java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:282)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:343)
	at org.gradle.util.internal.DisconnectableInputStream$1.run(DisconnectableInputStream.java:98)
	... 1 more
> Task :compileJava UP-TO-DATE
> Task :processResources UP-TO-DATE
> Task :classes UP-TO-DATE
> Task :resolveMainClassName UP-TO-DATE

> Task :bootRun

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.2)

[main] INFO yes1sir.yessir.YessirApplication - No active profile set, falling back to 1 default profile: "default"
[main] INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[main] INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 5 JPA repository interfaces.
Can't load log handler "java.util.logging.FileHandler"
java.nio.file.NoSuchFileException: logs/spring-boot-application.log.0.lck
java.nio.file.NoSuchFileException: logs/spring-boot-application.log.0.lck
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:181)
	at java.base/java.nio.channels.FileChannel.open(FileChannel.java:298)
	at java.base/java.nio.channels.FileChannel.open(FileChannel.java:357)
	at java.logging/java.util.logging.FileHandler.openFiles(FileHandler.java:512)
	at java.logging/java.util.logging.FileHandler.<init>(FileHandler.java:279)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.ReflectAccess.newInstance(ReflectAccess.java:128)
	at java.base/jdk.internal.reflect.ReflectionFactory.newInstance(ReflectionFactory.java:347)
	at java.base/java.lang.Class.newInstance(Class.java:645)
	at java.logging/java.util.logging.LogManager.createLoggerHandlers(LogManager.java:1005)
	at java.logging/java.util.logging.LogManager$4.run(LogManager.java:975)
	at java.logging/java.util.logging.LogManager$4.run(LogManager.java:971)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:318)
	at java.logging/java.util.logging.LogManager.loadLoggerHandlers(LogManager.java:971)
	at java.logging/java.util.logging.LogManager.initializeGlobalHandlers(LogManager.java:2424)
	at java.logging/java.util.logging.LogManager$RootLogger.accessCheckedHandlers(LogManager.java:2526)
	at java.logging/java.util.logging.Logger.getHandlers(Logger.java:2090)
	at org.apache.juli.logging.DirectJDKLog.<clinit>(DirectJDKLog.java:47)
	at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:133)
	at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:156)
	at org.apache.juli.logging.LogFactory.getLog(LogFactory.java:211)
	at org.apache.catalina.core.AprLifecycleListener.<clinit>(AprLifecycleListener.java:50)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getDefaultServerLifecycleListeners(TomcatServletWebServerFactory.java:190)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.<init>(TomcatServletWebServerFactory.java:138)
	at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat.tomcatServletWebServerFactory(ServletWebServerFactoryConfiguration.java:73)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:146)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1355)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getWebServerFactory(ServletWebServerApplicationContext.java:223)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:186)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:619)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at yes1sir.yessir.YessirApplication.main(YessirApplication.java:10)
[main] INFO org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
Aug 05, 2024 11:24:43 AM org.apache.catalina.core.StandardService startInternal
INFO: Starting service [Tomcat]
Aug 05, 2024 11:24:43 AM org.apache.catalina.core.StandardEngine startInternal
INFO: Starting Servlet engine: [Apache Tomcat/10.1.26]
Aug 05, 2024 11:24:43 AM org.apache.catalina.core.ApplicationContext log
INFO: Initializing Spring embedded WebApplicationContext
[main] INFO org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2360 ms
Aug 05, 2024 11:24:44 AM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: default]
Aug 05, 2024 11:24:44 AM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 6.5.2.Final
Aug 05, 2024 11:24:44 AM org.hibernate.cache.internal.RegionFactoryInitiator initiateService
INFO: HHH000026: Second-level cache disabled
[main] INFO org.springframework.orm.jpa.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
[main] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
[main] INFO com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5e7cd0df
[main] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
Aug 05, 2024 11:24:46 AM org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl constructDialect
WARN: HHH90000025: MySQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
Aug 05, 2024 11:24:47 AM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
[main] INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select st1_0.type_name from skin_type st1_0 where st1_0.type_name=?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
Hibernate: select p1_0.id from product p1_0 where p1_0.brand=? and p1_0.name=? limit ?
[main] WARN org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
[main] INFO org.springframework.boot.autoconfigure.web.servlet.WelcomePageHandlerMapping - Adding welcome page template: index
[main] WARN org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
[main] INFO org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
[main] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
[main] INFO com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
Aug 05, 2024 11:24:50 AM org.apache.catalina.core.StandardService stopInternal
INFO: Stopping service [Tomcat]
[main] INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
[main] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.


> Task :bootRun FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':bootRun'.
> Process 'command '/usr/lib/jvm/java-17-openjdk-amd64/bin/java'' finished with non-zero exit value 1

* Try:
> Run with --stacktrace option to get the stack trace.
> Run with --info or --debug option to get more log output.
> Run with --scan to get full insights.
> Get more help at https://help.gradle.org.

BUILD FAILED in 36s
4 actionable tasks: 1 executed, 3 up-to-date
